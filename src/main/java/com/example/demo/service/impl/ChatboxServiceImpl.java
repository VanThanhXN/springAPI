package com.example.demo.service.impl;

import com.example.demo.Repository.*;
import com.example.demo.config.GeminiConfig;

import com.example.demo.dto.Response.ChatResponse;
import com.example.demo.entity.*;
import com.example.demo.exception.AppException;
import com.example.demo.exception.ErrorCode;
import com.example.demo.service.ChatboxService;
import jakarta.annotation.PostConstruct;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ChatboxServiceImpl implements ChatboxService {

    private static final int MAX_CONTEXT_LENGTH = 2000;
    private static final int MAX_HISTORY_LENGTH = 5;

    private final ChatboxRepository chatboxRepository;
    private final UserRepository userRepository;
    private final ProductRepository productRepository;
    private final CategoryRepository categoryRepository;
    private final ReviewRepository reviewRepository;
    private final RestTemplate restTemplate;
    private final GeminiConfig geminiConfig;

    private String databaseKnowledge = "";
    private final Map<String, Queue<String>> userContexts = new ConcurrentHashMap<>();
    private LocalDateTime lastDataRefreshTime;

    @PostConstruct
    public void init() {
        refreshDatabaseKnowledge();
    }

    @Scheduled(fixedRate = 3600000) // L√†m m·ªõi d·ªØ li·ªáu m·ªói gi·ªù
    public void refreshDatabaseKnowledge() {
        StringBuilder knowledge = new StringBuilder();

        // 1. Th√¥ng tin t·ªïng quan h·ªá th·ªëng
        knowledge.append("üõçÔ∏è TH√îNG TIN H·ªÜ TH·ªêNG B√ÅN H√ÄNG\n")
                .append("----------------------------\n")
                .append(String.format("‚Ä¢ T·ªïng s·∫£n ph·∫©m: %d\n", productRepository.count()))
                .append(String.format("‚Ä¢ Danh m·ª•c: %d\n", categoryRepository.count()))
                .append(String.format("‚Ä¢ ƒê√°nh gi√°: %d\n", reviewRepository.count()))
                .append(String.format("‚Ä¢ ƒêi·ªÉm trung b√¨nh: %.1f/5\n\n",
                        reviewRepository.getAverageRating() != null ?
                                reviewRepository.getAverageRating() : 0));

        // 2. Danh s√°ch s·∫£n ph·∫©m (·∫©n ID)
        knowledge.append("üì¶ DANH S√ÅCH S·∫¢N PH·∫®M\n")
                .append("-------------------\n");
        productRepository.findAll().forEach(p -> {
            knowledge.append(String.format("¬ª %s\n", p.getName()))
                    .append(String.format("  üíµ Gi√°: %s\n", formatPrice(p.getPrice())))
                    .append(String.format("  üî• Gi·∫£m gi√°: %s\n",
                            p.getSalePrice() != null ? formatPrice(p.getSalePrice()) : "Kh√¥ng"))
                    .append(String.format("  ‚≠ê ƒê√°nh gi√°: %.1f/5 (%d l∆∞·ª£t)\n",
                            p.getRating() != null ? p.getRating() : 0,
                            p.getReviewCount() != null ? p.getReviewCount() : 0))
                    .append(String.format("  üì¶ T·ªìn kho: %d\n", p.getStock() != null ? p.getStock() : 0))
                    .append(String.format("  üè∑Ô∏è Danh m·ª•c: %s\n",
                            p.getCategory() != null ? p.getCategory().getName() : "Kh√¥ng c√≥"))
                    .append(String.format("  üñºÔ∏è H√¨nh ·∫£nh: %s\n\n",
                            p.getImageUrl() != null ? "C√≥" : "Kh√¥ng"));
        });

        // 3. Th√¥ng tin danh m·ª•c
        knowledge.append("üóÇÔ∏è DANH M·ª§C S·∫¢N PH·∫®M\n")
                .append("-------------------\n");
        categoryRepository.findAll().forEach(c -> {
            knowledge.append(String.format("‚Ä¢ %s (%d s·∫£n ph·∫©m)\n",
                    c.getName(), productRepository.countByCategory(c)));
        });

        // 4. ƒê√°nh gi√° n·ªïi b·∫≠t
        knowledge.append("\nüåü ƒê√ÅNH GI√Å G·∫¶N ƒê√ÇY\n")
                .append("----------------\n");
        reviewRepository.findTop5ByOrderByCreatedAtDesc().forEach(r -> {
            knowledge.append(String.format("‚Ä¢ %d‚≠ê %s\n",
                            r.getRating(), r.getProduct().getName()))
                    .append(String.format("  %s\n",
                            r.getComment() != null ?
                                    (r.getComment().length() > 50 ?
                                            r.getComment().substring(0, 50) + "..." : r.getComment())
                                    : "Kh√¥ng c√≥ b√¨nh lu·∫≠n"));
        });

        this.databaseKnowledge = knowledge.toString();
        this.lastDataRefreshTime = LocalDateTime.now();
    }

    @Override
    public ChatResponse sendMessage(com.example.demo.dto.request.ChatRequest request, String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_FOUND));

        // L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
        ChatboxMessage userMessage = saveUserMessage(user, request.getMessage());

        // X·ª≠ l√Ω b·∫±ng AI
        String aiResponse = processUserQuery(user.getUserId().toString(), request.getMessage());

        // L∆∞u ph·∫£n h·ªìi AI
        ChatboxMessage aiMessage = saveAiMessage(user, aiResponse);

        return buildChatResponse(aiMessage);
    }

    private String processUserQuery(String userId, String question) {
        // 1. Ki·ªÉm tra t·ª´ kh√≥a nh·∫°y c·∫£m
        if (containsSensitiveKeywords(question)) {
            return "üôÖ‚Äç‚ôÇÔ∏è Xin l·ªói, t√¥i kh√¥ng th·ªÉ cung c·∫•p th√¥ng tin ƒë√≥.";
        }

        // 2. X√¢y d·ª±ng context
        String context = buildUserContext(userId, question);

        // 3. G·ªçi AI
        try {
            String response = callGeminiAI(buildSmartPrompt(question, context));
            updateUserContext(userId, question, response);
            return formatAiResponse(response);
        } catch (Exception e) {
            return "‚ö†Ô∏è Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.";
        }
    }

    private String buildUserContext(String userId, String question) {
        Queue<String> userHistory = userContexts.getOrDefault(userId, new LinkedList<>());
        String history = String.join("\n", userHistory);

        return "üîÑ D·ªØ li·ªáu c·∫≠p nh·∫≠t l√∫c: " + lastDataRefreshTime + "\n\n" +
                "üìä TH√îNG TIN H·ªÜ TH·ªêNG:\n" +
                databaseKnowledge + "\n\n" +
                "üí¨ L·ªäCH S·ª¨ CHAT:\n" + history + "\n\n" +
                "‚ùì C√ÇU H·ªéI HI·ªÜN T·∫†I: " + question;
    }

    private String buildSmartPrompt(String question, String context) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng th√¥ng minh. QUY T·∫ÆC TR·∫¢ L·ªúI:\n")
                .append("1. TUY·ªÜT ƒê·ªêI KH√îNG hi·ªÉn th·ªã ID s·∫£n ph·∫©m\n")
                .append("2. Format r√µ r√†ng v·ªõi emoji ph√π h·ª£p\n")
                .append("3. ∆Øu ti√™n th√¥ng tin quan tr·ªçng\n")
                .append("4. Gi·ªØ phong c√°ch th√¢n thi·ªán\n\n");

        // Th√™m h∆∞·ªõng d·∫´n c·ª• th·ªÉ theo lo·∫°i c√¢u h·ªèi
        if (question.matches(".*(gi√°|bao nhi√™u ti·ªÅn|cost|price).*")) {
            prompt.append("üî¢ V·ªÄ GI√Å C·∫¢:\n")
                    .append("- Lu√¥n hi·ªÉn th·ªã gi√° g·ªëc v√† khuy·∫øn m√£i (n·∫øu c√≥)\n")
                    .append("- ƒê·ªãnh d·∫°ng: 100,000 VND\n\n");
        }

        if (question.matches(".*(ƒë√°nh gi√°|review|rating).*")) {
            prompt.append("‚≠ê V·ªÄ ƒê√ÅNH GI√Å:\n")
                    .append("- T√≥m t·∫Øt ƒëi·ªÉm s·ªë v√† b√¨nh lu·∫≠n n·ªïi b·∫≠t\n")
                    .append("- N·∫øu c√≥ nhi·ªÅu ƒë√°nh gi√°, ch·ªâ hi·ªÉn th·ªã 3 c√°i ti√™u bi·ªÉu\n\n");
        }

        prompt.append("üìå CONTEXT:\n").append(context);

        return prompt.toString();
    }

    private String callGeminiAI(String prompt) {
        String url = geminiConfig.getApiUrl() + "?key=" + geminiConfig.getApiKey();

        Map<String, Object> requestBody = new HashMap<>();
        Map<String, Object> content = new HashMap<>();
        Map<String, Object> part = new HashMap<>();

        part.put("text", prompt);
        content.put("parts", List.of(part));
        requestBody.put("contents", List.of(content));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

        ResponseEntity<Map> response = restTemplate.exchange(
                url,
                HttpMethod.POST,
                entity,
                Map.class);

        if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
            return extractResponseText(response.getBody());
        }
        throw new AppException(ErrorCode.AI_SERVICE_ERROR);
    }

    private void updateUserContext(String userId, String question, String response) {
        Queue<String> history = userContexts.computeIfAbsent(userId, k -> new LinkedList<>());
        history.add("Q: " + question + "\nA: " + response);

        // Gi·ªõi h·∫°n l·ªãch s·ª≠
        while (history.size() > MAX_HISTORY_LENGTH) {
            history.poll();
        }
    }

    private String formatAiResponse(String rawResponse) {
        // Chu·∫©n h√≥a ƒë·∫ßu ra AI
        return rawResponse.replaceAll("(?i)\\bID:\\s*\\d+\\b", "") // Lo·∫°i b·ªè ID
                .replaceAll("\n+", "\n") // X√≥a d√≤ng tr·ªëng th·ª´a
                .trim();
    }

    private String formatPrice(BigDecimal price) {
        return price != null ? String.format("%,d VND", price.longValue()) : "Li√™n h·ªá";
    }

    private boolean containsSensitiveKeywords(String message) {
        String[] sensitiveKeywords = {
                "password", "m·∫≠t kh·∫©u", "credit card", "th·∫ª t√≠n d·ª•ng",
                "th√¥ng tin c√° nh√¢n", "personal information", "admin"
        };
        return Arrays.stream(sensitiveKeywords)
                .anyMatch(keyword -> message.toLowerCase().contains(keyword.toLowerCase()));
    }

    private String extractResponseText(Map<String, Object> response) {
        try {
            Map<String, Object> candidate = ((List<Map<String, Object>>) response.get("candidates")).get(0);
            Map<String, Object> content = (Map<String, Object>) candidate.get("content");
            List<Map<String, Object>> parts = (List<Map<String, Object>>) content.get("parts");
            return (String) parts.get(0).get("text");
        } catch (Exception e) {
            throw new AppException(ErrorCode.AI_SERVICE_ERROR);
        }
    }

    private ChatboxMessage saveUserMessage(User user, String content) {
        ChatboxMessage message = ChatboxMessage.builder()
                .user(user)
                .content(content)
                .type(MessageType.USER)
                .createdAt(LocalDateTime.now())
                .build();
        return chatboxRepository.save(message);
    }

    private ChatboxMessage saveAiMessage(User user, String content) {
        ChatboxMessage message = ChatboxMessage.builder()
                .user(user)
                .content(content)
                .type(MessageType.AI)
                .createdAt(LocalDateTime.now())
                .build();
        return chatboxRepository.save(message);
    }

    private ChatResponse buildChatResponse(ChatboxMessage message) {
        return ChatResponse.builder()
                .messageId(message.getMessageId())
                .content(message.getContent())
                .type("AI")
                .createdAt(message.getCreatedAt())
                .build();
    }

    @Override
    public List<ChatResponse> getChatHistory(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_FOUND));

        return chatboxRepository.findByUserOrderByCreatedAtAsc(user).stream()
                .map(this::buildChatResponse)
                .collect(Collectors.toList());
    }
    @Transactional
    @Override
    public void clearChatHistory(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_FOUND));
        chatboxRepository.deleteByUser(user);
        userContexts.remove(user.getUserId().toString());
    }
}